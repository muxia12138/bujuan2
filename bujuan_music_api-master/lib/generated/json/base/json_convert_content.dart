// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:bujuan_music_api/api/album/entity/album_info_entity.dart';
import 'package:bujuan_music_api/api/album/entity/new_album_entity.dart';
import 'package:bujuan_music_api/api/mv/entity/mv_url_entity.dart';
import 'package:bujuan_music_api/api/playlist/entity/catalogue_entity.dart';
import 'package:bujuan_music_api/api/playlist/entity/create_playlist_entity.dart';
import 'package:bujuan_music_api/api/playlist/entity/high_quality_tags_entity.dart';
import 'package:bujuan_music_api/api/playlist/entity/playlist_detail_entity.dart';
import 'package:bujuan_music_api/api/recommend/entity/recommend_resource_entity.dart';
import 'package:bujuan_music_api/api/recommend/entity/recommend_song_entity.dart';
import 'package:bujuan_music_api/api/song/entity/new_song_entity.dart';
import 'package:bujuan_music_api/api/song/entity/song_detail_entity.dart';
import 'package:bujuan_music_api/api/song/entity/song_like_check_entity.dart';
import 'package:bujuan_music_api/api/song/entity/song_quality_detail_entity.dart';
import 'package:bujuan_music_api/api/song/entity/song_url_entity.dart';
import 'package:bujuan_music_api/api/top/entity/top_artist_entity.dart';
import 'package:bujuan_music_api/api/user/entity/bool_entity.dart';
import 'package:bujuan_music_api/api/user/entity/like_list_entity.dart';
import 'package:bujuan_music_api/api/user/entity/login_entity.dart';
import 'package:bujuan_music_api/api/user/entity/qr_check_entity.dart';
import 'package:bujuan_music_api/api/user/entity/qrcode_key_entity.dart';
import 'package:bujuan_music_api/api/user/entity/string_entity.dart';
import 'package:bujuan_music_api/api/user/entity/user_info_entity.dart';
import 'package:bujuan_music_api/api/user/entity/user_playlist_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AlbumInfoEntity>[] is M) {
      return data.map<AlbumInfoEntity>((Map<String, dynamic> e) => AlbumInfoEntity.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongs>[] is M) {
      return data.map<AlbumInfoSongs>((Map<String, dynamic> e) => AlbumInfoSongs.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsAr>[] is M) {
      return data.map<AlbumInfoSongsAr>((Map<String, dynamic> e) => AlbumInfoSongsAr.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsAl>[] is M) {
      return data.map<AlbumInfoSongsAl>((Map<String, dynamic> e) => AlbumInfoSongsAl.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsH>[] is M) {
      return data.map<AlbumInfoSongsH>((Map<String, dynamic> e) => AlbumInfoSongsH.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsSq>[] is M) {
      return data.map<AlbumInfoSongsSq>((Map<String, dynamic> e) => AlbumInfoSongsSq.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsL>[] is M) {
      return data.map<AlbumInfoSongsL>((Map<String, dynamic> e) => AlbumInfoSongsL.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsM>[] is M) {
      return data.map<AlbumInfoSongsM>((Map<String, dynamic> e) => AlbumInfoSongsM.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoSongsPrivilege>[] is M) {
      return data.map<AlbumInfoSongsPrivilege>((Map<String, dynamic> e) =>
          AlbumInfoSongsPrivilege.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoSongsPrivilegeFreeTrialPrivilege>[] is M) {
      return data.map<AlbumInfoSongsPrivilegeFreeTrialPrivilege>((Map<String, dynamic> e) =>
          AlbumInfoSongsPrivilegeFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoSongsPrivilegeChargeInfoList>[] is M) {
      return data.map<AlbumInfoSongsPrivilegeChargeInfoList>((Map<String, dynamic> e) =>
          AlbumInfoSongsPrivilegeChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoAlbum>[] is M) {
      return data.map<AlbumInfoAlbum>((Map<String, dynamic> e) => AlbumInfoAlbum.fromJson(e))
          .toList() as M;
    }
    if (<AlbumInfoAlbumArtists>[] is M) {
      return data.map<AlbumInfoAlbumArtists>((Map<String, dynamic> e) =>
          AlbumInfoAlbumArtists.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoAlbumArtist>[] is M) {
      return data.map<AlbumInfoAlbumArtist>((Map<String, dynamic> e) =>
          AlbumInfoAlbumArtist.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoAlbumInfo>[] is M) {
      return data.map<AlbumInfoAlbumInfo>((Map<String, dynamic> e) =>
          AlbumInfoAlbumInfo.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoAlbumInfoCommentThread>[] is M) {
      return data.map<AlbumInfoAlbumInfoCommentThread>((Map<String, dynamic> e) =>
          AlbumInfoAlbumInfoCommentThread.fromJson(e)).toList() as M;
    }
    if (<AlbumInfoAlbumInfoCommentThreadResourceInfo>[] is M) {
      return data.map<AlbumInfoAlbumInfoCommentThreadResourceInfo>((Map<String, dynamic> e) =>
          AlbumInfoAlbumInfoCommentThreadResourceInfo.fromJson(e)).toList() as M;
    }
    if (<NewAlbumEntity>[] is M) {
      return data.map<NewAlbumEntity>((Map<String, dynamic> e) => NewAlbumEntity.fromJson(e))
          .toList() as M;
    }
    if (<NewAlbumAlbums>[] is M) {
      return data.map<NewAlbumAlbums>((Map<String, dynamic> e) => NewAlbumAlbums.fromJson(e))
          .toList() as M;
    }
    if (<NewAlbumAlbumsArtists>[] is M) {
      return data.map<NewAlbumAlbumsArtists>((Map<String, dynamic> e) =>
          NewAlbumAlbumsArtists.fromJson(e)).toList() as M;
    }
    if (<NewAlbumAlbumsArtist>[] is M) {
      return data.map<NewAlbumAlbumsArtist>((Map<String, dynamic> e) =>
          NewAlbumAlbumsArtist.fromJson(e)).toList() as M;
    }
    if (<MvUrlEntity>[] is M) {
      return data.map<MvUrlEntity>((Map<String, dynamic> e) => MvUrlEntity.fromJson(e))
          .toList() as M;
    }
    if (<MvUrlData>[] is M) {
      return data.map<MvUrlData>((Map<String, dynamic> e) => MvUrlData.fromJson(e)).toList() as M;
    }
    if (<CatalogueEntity>[] is M) {
      return data.map<CatalogueEntity>((Map<String, dynamic> e) => CatalogueEntity.fromJson(e))
          .toList() as M;
    }
    if (<CatalogueAll>[] is M) {
      return data.map<CatalogueAll>((Map<String, dynamic> e) => CatalogueAll.fromJson(e))
          .toList() as M;
    }
    if (<CatalogueSub>[] is M) {
      return data.map<CatalogueSub>((Map<String, dynamic> e) => CatalogueSub.fromJson(e))
          .toList() as M;
    }
    if (<CreatePlaylistEntity>[] is M) {
      return data.map<CreatePlaylistEntity>((Map<String, dynamic> e) =>
          CreatePlaylistEntity.fromJson(e)).toList() as M;
    }
    if (<CreatePlaylistPlaylist>[] is M) {
      return data.map<CreatePlaylistPlaylist>((Map<String, dynamic> e) =>
          CreatePlaylistPlaylist.fromJson(e)).toList() as M;
    }
    if (<HighQualityTagsEntity>[] is M) {
      return data.map<HighQualityTagsEntity>((Map<String, dynamic> e) =>
          HighQualityTagsEntity.fromJson(e)).toList() as M;
    }
    if (<HighQualityTagsTags>[] is M) {
      return data.map<HighQualityTagsTags>((Map<String, dynamic> e) =>
          HighQualityTagsTags.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailEntity>[] is M) {
      return data.map<PlaylistDetailEntity>((Map<String, dynamic> e) =>
          PlaylistDetailEntity.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylist>[] is M) {
      return data.map<PlaylistDetailPlaylist>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylist.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistSubscribers>[] is M) {
      return data.map<PlaylistDetailPlaylistSubscribers>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistSubscribers.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistCreator>[] is M) {
      return data.map<PlaylistDetailPlaylistCreator>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistCreator.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistCreatorAvatarDetail>[] is M) {
      return data.map<PlaylistDetailPlaylistCreatorAvatarDetail>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistCreatorAvatarDetail.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracks>[] is M) {
      return data.map<PlaylistDetailPlaylistTracks>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracks.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksAr>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksAr>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksAr.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksAl>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksAl>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksAl.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksH>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksH>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksH.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksM>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksM>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksM.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksL>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksL>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksL.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksSq>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksSq>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksSq.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTracksHr>[] is M) {
      return data.map<PlaylistDetailPlaylistTracksHr>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTracksHr.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistTrackIds>[] is M) {
      return data.map<PlaylistDetailPlaylistTrackIds>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistTrackIds.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPlaylistBizExtInfo>[] is M) {
      return data.map<PlaylistDetailPlaylistBizExtInfo>((Map<String, dynamic> e) =>
          PlaylistDetailPlaylistBizExtInfo.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPrivileges>[] is M) {
      return data.map<PlaylistDetailPrivileges>((Map<String, dynamic> e) =>
          PlaylistDetailPrivileges.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPrivilegesFreeTrialPrivilege>[] is M) {
      return data.map<PlaylistDetailPrivilegesFreeTrialPrivilege>((Map<String, dynamic> e) =>
          PlaylistDetailPrivilegesFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<PlaylistDetailPrivilegesChargeInfoList>[] is M) {
      return data.map<PlaylistDetailPrivilegesChargeInfoList>((Map<String, dynamic> e) =>
          PlaylistDetailPrivilegesChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<RecommendResourceEntity>[] is M) {
      return data.map<RecommendResourceEntity>((Map<String, dynamic> e) =>
          RecommendResourceEntity.fromJson(e)).toList() as M;
    }
    if (<RecommendResourceRecommend>[] is M) {
      return data.map<RecommendResourceRecommend>((Map<String, dynamic> e) =>
          RecommendResourceRecommend.fromJson(e)).toList() as M;
    }
    if (<RecommendResourceRecommendCreator>[] is M) {
      return data.map<RecommendResourceRecommendCreator>((Map<String, dynamic> e) =>
          RecommendResourceRecommendCreator.fromJson(e)).toList() as M;
    }
    if (<RecommendSongEntity>[] is M) {
      return data.map<RecommendSongEntity>((Map<String, dynamic> e) =>
          RecommendSongEntity.fromJson(e)).toList() as M;
    }
    if (<RecommendSongData>[] is M) {
      return data.map<RecommendSongData>((Map<String, dynamic> e) => RecommendSongData.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongDataDailySongs>[] is M) {
      return data.map<RecommendSongDataDailySongs>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongs.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsAr>[] is M) {
      return data.map<RecommendSongDataDailySongsAr>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsAr.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsAl>[] is M) {
      return data.map<RecommendSongDataDailySongsAl>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsAl.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsH>[] is M) {
      return data.map<RecommendSongDataDailySongsH>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsH.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsM>[] is M) {
      return data.map<RecommendSongDataDailySongsM>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsM.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsL>[] is M) {
      return data.map<RecommendSongDataDailySongsL>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsL.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsSq>[] is M) {
      return data.map<RecommendSongDataDailySongsSq>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsSq.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsHr>[] is M) {
      return data.map<RecommendSongDataDailySongsHr>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsHr.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsPrivilege>[] is M) {
      return data.map<RecommendSongDataDailySongsPrivilege>((Map<String, dynamic> e) =>
          RecommendSongDataDailySongsPrivilege.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsPrivilegeFreeTrialPrivilege>[] is M) {
      return data.map<RecommendSongDataDailySongsPrivilegeFreeTrialPrivilege>((
          Map<String, dynamic> e) =>
          RecommendSongDataDailySongsPrivilegeFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<RecommendSongDataDailySongsPrivilegeChargeInfoList>[] is M) {
      return data.map<RecommendSongDataDailySongsPrivilegeChargeInfoList>((
          Map<String, dynamic> e) => RecommendSongDataDailySongsPrivilegeChargeInfoList.fromJson(e))
          .toList() as M;
    }
    if (<RecommendSongDataRecommendReasons>[] is M) {
      return data.map<RecommendSongDataRecommendReasons>((Map<String, dynamic> e) =>
          RecommendSongDataRecommendReasons.fromJson(e)).toList() as M;
    }
    if (<NewSongEntity>[] is M) {
      return data.map<NewSongEntity>((Map<String, dynamic> e) => NewSongEntity.fromJson(e))
          .toList() as M;
    }
    if (<NewSongData>[] is M) {
      return data.map<NewSongData>((Map<String, dynamic> e) => NewSongData.fromJson(e))
          .toList() as M;
    }
    if (<NewSongDataPrivilege>[] is M) {
      return data.map<NewSongDataPrivilege>((Map<String, dynamic> e) =>
          NewSongDataPrivilege.fromJson(e)).toList() as M;
    }
    if (<NewSongDataPrivilegeFreeTrialPrivilege>[] is M) {
      return data.map<NewSongDataPrivilegeFreeTrialPrivilege>((Map<String, dynamic> e) =>
          NewSongDataPrivilegeFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<NewSongDataPrivilegeChargeInfoList>[] is M) {
      return data.map<NewSongDataPrivilegeChargeInfoList>((Map<String, dynamic> e) =>
          NewSongDataPrivilegeChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<NewSongDataArtists>[] is M) {
      return data.map<NewSongDataArtists>((Map<String, dynamic> e) =>
          NewSongDataArtists.fromJson(e)).toList() as M;
    }
    if (<NewSongDataHMusic>[] is M) {
      return data.map<NewSongDataHMusic>((Map<String, dynamic> e) => NewSongDataHMusic.fromJson(e))
          .toList() as M;
    }
    if (<NewSongDataMMusic>[] is M) {
      return data.map<NewSongDataMMusic>((Map<String, dynamic> e) => NewSongDataMMusic.fromJson(e))
          .toList() as M;
    }
    if (<NewSongDataLMusic>[] is M) {
      return data.map<NewSongDataLMusic>((Map<String, dynamic> e) => NewSongDataLMusic.fromJson(e))
          .toList() as M;
    }
    if (<NewSongDataAlbum>[] is M) {
      return data.map<NewSongDataAlbum>((Map<String, dynamic> e) => NewSongDataAlbum.fromJson(e))
          .toList() as M;
    }
    if (<NewSongDataAlbumArtists>[] is M) {
      return data.map<NewSongDataAlbumArtists>((Map<String, dynamic> e) =>
          NewSongDataAlbumArtists.fromJson(e)).toList() as M;
    }
    if (<NewSongDataAlbumArtist>[] is M) {
      return data.map<NewSongDataAlbumArtist>((Map<String, dynamic> e) =>
          NewSongDataAlbumArtist.fromJson(e)).toList() as M;
    }
    if (<NewSongDataBMusic>[] is M) {
      return data.map<NewSongDataBMusic>((Map<String, dynamic> e) => NewSongDataBMusic.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailEntity>[] is M) {
      return data.map<SongDetailEntity>((Map<String, dynamic> e) => SongDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongs>[] is M) {
      return data.map<SongDetailSongs>((Map<String, dynamic> e) => SongDetailSongs.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongsAr>[] is M) {
      return data.map<SongDetailSongsAr>((Map<String, dynamic> e) => SongDetailSongsAr.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongsAl>[] is M) {
      return data.map<SongDetailSongsAl>((Map<String, dynamic> e) => SongDetailSongsAl.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongsH>[] is M) {
      return data.map<SongDetailSongsH>((Map<String, dynamic> e) => SongDetailSongsH.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongsM>[] is M) {
      return data.map<SongDetailSongsM>((Map<String, dynamic> e) => SongDetailSongsM.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongsL>[] is M) {
      return data.map<SongDetailSongsL>((Map<String, dynamic> e) => SongDetailSongsL.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailSongsSq>[] is M) {
      return data.map<SongDetailSongsSq>((Map<String, dynamic> e) => SongDetailSongsSq.fromJson(e))
          .toList() as M;
    }
    if (<SongDetailPrivileges>[] is M) {
      return data.map<SongDetailPrivileges>((Map<String, dynamic> e) =>
          SongDetailPrivileges.fromJson(e)).toList() as M;
    }
    if (<SongDetailPrivilegesFreeTrialPrivilege>[] is M) {
      return data.map<SongDetailPrivilegesFreeTrialPrivilege>((Map<String, dynamic> e) =>
          SongDetailPrivilegesFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<SongDetailPrivilegesChargeInfoList>[] is M) {
      return data.map<SongDetailPrivilegesChargeInfoList>((Map<String, dynamic> e) =>
          SongDetailPrivilegesChargeInfoList.fromJson(e)).toList() as M;
    }
    if (<SongLikeCheckEntity>[] is M) {
      return data.map<SongLikeCheckEntity>((Map<String, dynamic> e) =>
          SongLikeCheckEntity.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailEntity>[] is M) {
      return data.map<SongQualityDetailEntity>((Map<String, dynamic> e) =>
          SongQualityDetailEntity.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailData>[] is M) {
      return data.map<SongQualityDetailData>((Map<String, dynamic> e) =>
          SongQualityDetailData.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataH>[] is M) {
      return data.map<SongQualityDetailDataH>((Map<String, dynamic> e) =>
          SongQualityDetailDataH.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataM>[] is M) {
      return data.map<SongQualityDetailDataM>((Map<String, dynamic> e) =>
          SongQualityDetailDataM.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataL>[] is M) {
      return data.map<SongQualityDetailDataL>((Map<String, dynamic> e) =>
          SongQualityDetailDataL.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataSq>[] is M) {
      return data.map<SongQualityDetailDataSq>((Map<String, dynamic> e) =>
          SongQualityDetailDataSq.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataJm>[] is M) {
      return data.map<SongQualityDetailDataJm>((Map<String, dynamic> e) =>
          SongQualityDetailDataJm.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataJe>[] is M) {
      return data.map<SongQualityDetailDataJe>((Map<String, dynamic> e) =>
          SongQualityDetailDataJe.fromJson(e)).toList() as M;
    }
    if (<SongQualityDetailDataVi>[] is M) {
      return data.map<SongQualityDetailDataVi>((Map<String, dynamic> e) =>
          SongQualityDetailDataVi.fromJson(e)).toList() as M;
    }
    if (<SongUrlEntity>[] is M) {
      return data.map<SongUrlEntity>((Map<String, dynamic> e) => SongUrlEntity.fromJson(e))
          .toList() as M;
    }
    if (<SongUrlData>[] is M) {
      return data.map<SongUrlData>((Map<String, dynamic> e) => SongUrlData.fromJson(e))
          .toList() as M;
    }
    if (<SongUrlDataFreeTrialPrivilege>[] is M) {
      return data.map<SongUrlDataFreeTrialPrivilege>((Map<String, dynamic> e) =>
          SongUrlDataFreeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<SongUrlDataFreeTimeTrialPrivilege>[] is M) {
      return data.map<SongUrlDataFreeTimeTrialPrivilege>((Map<String, dynamic> e) =>
          SongUrlDataFreeTimeTrialPrivilege.fromJson(e)).toList() as M;
    }
    if (<TopArtistEntity>[] is M) {
      return data.map<TopArtistEntity>((Map<String, dynamic> e) => TopArtistEntity.fromJson(e))
          .toList() as M;
    }
    if (<TopArtistArtists>[] is M) {
      return data.map<TopArtistArtists>((Map<String, dynamic> e) => TopArtistArtists.fromJson(e))
          .toList() as M;
    }
    if (<BoolEntity>[] is M) {
      return data.map<BoolEntity>((Map<String, dynamic> e) => BoolEntity.fromJson(e)).toList() as M;
    }
    if (<LikeListEntity>[] is M) {
      return data.map<LikeListEntity>((Map<String, dynamic> e) => LikeListEntity.fromJson(e))
          .toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e))
          .toList() as M;
    }
    if (<LoginAccount>[] is M) {
      return data.map<LoginAccount>((Map<String, dynamic> e) => LoginAccount.fromJson(e))
          .toList() as M;
    }
    if (<LoginProfile>[] is M) {
      return data.map<LoginProfile>((Map<String, dynamic> e) => LoginProfile.fromJson(e))
          .toList() as M;
    }
    if (<LoginProfileExperts>[] is M) {
      return data.map<LoginProfileExperts>((Map<String, dynamic> e) =>
          LoginProfileExperts.fromJson(e)).toList() as M;
    }
    if (<LoginBindings>[] is M) {
      return data.map<LoginBindings>((Map<String, dynamic> e) => LoginBindings.fromJson(e))
          .toList() as M;
    }
    if (<QrCheckEntity>[] is M) {
      return data.map<QrCheckEntity>((Map<String, dynamic> e) => QrCheckEntity.fromJson(e))
          .toList() as M;
    }
    if (<QrcodeKeyEntity>[] is M) {
      return data.map<QrcodeKeyEntity>((Map<String, dynamic> e) => QrcodeKeyEntity.fromJson(e))
          .toList() as M;
    }
    if (<StringEntity>[] is M) {
      return data.map<StringEntity>((Map<String, dynamic> e) => StringEntity.fromJson(e))
          .toList() as M;
    }
    if (<UserInfoEntity>[] is M) {
      return data.map<UserInfoEntity>((Map<String, dynamic> e) => UserInfoEntity.fromJson(e))
          .toList() as M;
    }
    if (<UserInfoAccount>[] is M) {
      return data.map<UserInfoAccount>((Map<String, dynamic> e) => UserInfoAccount.fromJson(e))
          .toList() as M;
    }
    if (<UserInfoProfile>[] is M) {
      return data.map<UserInfoProfile>((Map<String, dynamic> e) => UserInfoProfile.fromJson(e))
          .toList() as M;
    }
    if (<UserPlaylistEntity>[] is M) {
      return data.map<UserPlaylistEntity>((Map<String, dynamic> e) =>
          UserPlaylistEntity.fromJson(e)).toList() as M;
    }
    if (<UserPlaylistPlaylist>[] is M) {
      return data.map<UserPlaylistPlaylist>((Map<String, dynamic> e) =>
          UserPlaylistPlaylist.fromJson(e)).toList() as M;
    }
    if (<UserPlaylistPlaylistCreator>[] is M) {
      return data.map<UserPlaylistPlaylistCreator>((Map<String, dynamic> e) =>
          UserPlaylistPlaylistCreator.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AlbumInfoEntity).toString(): AlbumInfoEntity.fromJson,
    (AlbumInfoSongs).toString(): AlbumInfoSongs.fromJson,
    (AlbumInfoSongsAr).toString(): AlbumInfoSongsAr.fromJson,
    (AlbumInfoSongsAl).toString(): AlbumInfoSongsAl.fromJson,
    (AlbumInfoSongsH).toString(): AlbumInfoSongsH.fromJson,
    (AlbumInfoSongsSq).toString(): AlbumInfoSongsSq.fromJson,
    (AlbumInfoSongsL).toString(): AlbumInfoSongsL.fromJson,
    (AlbumInfoSongsM).toString(): AlbumInfoSongsM.fromJson,
    (AlbumInfoSongsPrivilege).toString(): AlbumInfoSongsPrivilege.fromJson,
    (AlbumInfoSongsPrivilegeFreeTrialPrivilege)
        .toString(): AlbumInfoSongsPrivilegeFreeTrialPrivilege.fromJson,
    (AlbumInfoSongsPrivilegeChargeInfoList).toString(): AlbumInfoSongsPrivilegeChargeInfoList
        .fromJson,
    (AlbumInfoAlbum).toString(): AlbumInfoAlbum.fromJson,
    (AlbumInfoAlbumArtists).toString(): AlbumInfoAlbumArtists.fromJson,
    (AlbumInfoAlbumArtist).toString(): AlbumInfoAlbumArtist.fromJson,
    (AlbumInfoAlbumInfo).toString(): AlbumInfoAlbumInfo.fromJson,
    (AlbumInfoAlbumInfoCommentThread).toString(): AlbumInfoAlbumInfoCommentThread.fromJson,
    (AlbumInfoAlbumInfoCommentThreadResourceInfo)
        .toString(): AlbumInfoAlbumInfoCommentThreadResourceInfo.fromJson,
    (NewAlbumEntity).toString(): NewAlbumEntity.fromJson,
    (NewAlbumAlbums).toString(): NewAlbumAlbums.fromJson,
    (NewAlbumAlbumsArtists).toString(): NewAlbumAlbumsArtists.fromJson,
    (NewAlbumAlbumsArtist).toString(): NewAlbumAlbumsArtist.fromJson,
    (MvUrlEntity).toString(): MvUrlEntity.fromJson,
    (MvUrlData).toString(): MvUrlData.fromJson,
    (CatalogueEntity).toString(): CatalogueEntity.fromJson,
    (CatalogueAll).toString(): CatalogueAll.fromJson,
    (CatalogueSub).toString(): CatalogueSub.fromJson,
    (CreatePlaylistEntity).toString(): CreatePlaylistEntity.fromJson,
    (CreatePlaylistPlaylist).toString(): CreatePlaylistPlaylist.fromJson,
    (HighQualityTagsEntity).toString(): HighQualityTagsEntity.fromJson,
    (HighQualityTagsTags).toString(): HighQualityTagsTags.fromJson,
    (PlaylistDetailEntity).toString(): PlaylistDetailEntity.fromJson,
    (PlaylistDetailPlaylist).toString(): PlaylistDetailPlaylist.fromJson,
    (PlaylistDetailPlaylistSubscribers).toString(): PlaylistDetailPlaylistSubscribers.fromJson,
    (PlaylistDetailPlaylistCreator).toString(): PlaylistDetailPlaylistCreator.fromJson,
    (PlaylistDetailPlaylistCreatorAvatarDetail)
        .toString(): PlaylistDetailPlaylistCreatorAvatarDetail.fromJson,
    (PlaylistDetailPlaylistTracks).toString(): PlaylistDetailPlaylistTracks.fromJson,
    (PlaylistDetailPlaylistTracksAr).toString(): PlaylistDetailPlaylistTracksAr.fromJson,
    (PlaylistDetailPlaylistTracksAl).toString(): PlaylistDetailPlaylistTracksAl.fromJson,
    (PlaylistDetailPlaylistTracksH).toString(): PlaylistDetailPlaylistTracksH.fromJson,
    (PlaylistDetailPlaylistTracksM).toString(): PlaylistDetailPlaylistTracksM.fromJson,
    (PlaylistDetailPlaylistTracksL).toString(): PlaylistDetailPlaylistTracksL.fromJson,
    (PlaylistDetailPlaylistTracksSq).toString(): PlaylistDetailPlaylistTracksSq.fromJson,
    (PlaylistDetailPlaylistTracksHr).toString(): PlaylistDetailPlaylistTracksHr.fromJson,
    (PlaylistDetailPlaylistTrackIds).toString(): PlaylistDetailPlaylistTrackIds.fromJson,
    (PlaylistDetailPlaylistBizExtInfo).toString(): PlaylistDetailPlaylistBizExtInfo.fromJson,
    (PlaylistDetailPrivileges).toString(): PlaylistDetailPrivileges.fromJson,
    (PlaylistDetailPrivilegesFreeTrialPrivilege)
        .toString(): PlaylistDetailPrivilegesFreeTrialPrivilege.fromJson,
    (PlaylistDetailPrivilegesChargeInfoList).toString(): PlaylistDetailPrivilegesChargeInfoList
        .fromJson,
    (RecommendResourceEntity).toString(): RecommendResourceEntity.fromJson,
    (RecommendResourceRecommend).toString(): RecommendResourceRecommend.fromJson,
    (RecommendResourceRecommendCreator).toString(): RecommendResourceRecommendCreator.fromJson,
    (RecommendSongEntity).toString(): RecommendSongEntity.fromJson,
    (RecommendSongData).toString(): RecommendSongData.fromJson,
    (RecommendSongDataDailySongs).toString(): RecommendSongDataDailySongs.fromJson,
    (RecommendSongDataDailySongsAr).toString(): RecommendSongDataDailySongsAr.fromJson,
    (RecommendSongDataDailySongsAl).toString(): RecommendSongDataDailySongsAl.fromJson,
    (RecommendSongDataDailySongsH).toString(): RecommendSongDataDailySongsH.fromJson,
    (RecommendSongDataDailySongsM).toString(): RecommendSongDataDailySongsM.fromJson,
    (RecommendSongDataDailySongsL).toString(): RecommendSongDataDailySongsL.fromJson,
    (RecommendSongDataDailySongsSq).toString(): RecommendSongDataDailySongsSq.fromJson,
    (RecommendSongDataDailySongsHr).toString(): RecommendSongDataDailySongsHr.fromJson,
    (RecommendSongDataDailySongsPrivilege).toString(): RecommendSongDataDailySongsPrivilege
        .fromJson,
    (RecommendSongDataDailySongsPrivilegeFreeTrialPrivilege)
        .toString(): RecommendSongDataDailySongsPrivilegeFreeTrialPrivilege.fromJson,
    (RecommendSongDataDailySongsPrivilegeChargeInfoList)
        .toString(): RecommendSongDataDailySongsPrivilegeChargeInfoList.fromJson,
    (RecommendSongDataRecommendReasons).toString(): RecommendSongDataRecommendReasons.fromJson,
    (NewSongEntity).toString(): NewSongEntity.fromJson,
    (NewSongData).toString(): NewSongData.fromJson,
    (NewSongDataPrivilege).toString(): NewSongDataPrivilege.fromJson,
    (NewSongDataPrivilegeFreeTrialPrivilege).toString(): NewSongDataPrivilegeFreeTrialPrivilege
        .fromJson,
    (NewSongDataPrivilegeChargeInfoList).toString(): NewSongDataPrivilegeChargeInfoList.fromJson,
    (NewSongDataArtists).toString(): NewSongDataArtists.fromJson,
    (NewSongDataHMusic).toString(): NewSongDataHMusic.fromJson,
    (NewSongDataMMusic).toString(): NewSongDataMMusic.fromJson,
    (NewSongDataLMusic).toString(): NewSongDataLMusic.fromJson,
    (NewSongDataAlbum).toString(): NewSongDataAlbum.fromJson,
    (NewSongDataAlbumArtists).toString(): NewSongDataAlbumArtists.fromJson,
    (NewSongDataAlbumArtist).toString(): NewSongDataAlbumArtist.fromJson,
    (NewSongDataBMusic).toString(): NewSongDataBMusic.fromJson,
    (SongDetailEntity).toString(): SongDetailEntity.fromJson,
    (SongDetailSongs).toString(): SongDetailSongs.fromJson,
    (SongDetailSongsAr).toString(): SongDetailSongsAr.fromJson,
    (SongDetailSongsAl).toString(): SongDetailSongsAl.fromJson,
    (SongDetailSongsH).toString(): SongDetailSongsH.fromJson,
    (SongDetailSongsM).toString(): SongDetailSongsM.fromJson,
    (SongDetailSongsL).toString(): SongDetailSongsL.fromJson,
    (SongDetailSongsSq).toString(): SongDetailSongsSq.fromJson,
    (SongDetailPrivileges).toString(): SongDetailPrivileges.fromJson,
    (SongDetailPrivilegesFreeTrialPrivilege).toString(): SongDetailPrivilegesFreeTrialPrivilege
        .fromJson,
    (SongDetailPrivilegesChargeInfoList).toString(): SongDetailPrivilegesChargeInfoList.fromJson,
    (SongLikeCheckEntity).toString(): SongLikeCheckEntity.fromJson,
    (SongQualityDetailEntity).toString(): SongQualityDetailEntity.fromJson,
    (SongQualityDetailData).toString(): SongQualityDetailData.fromJson,
    (SongQualityDetailDataH).toString(): SongQualityDetailDataH.fromJson,
    (SongQualityDetailDataM).toString(): SongQualityDetailDataM.fromJson,
    (SongQualityDetailDataL).toString(): SongQualityDetailDataL.fromJson,
    (SongQualityDetailDataSq).toString(): SongQualityDetailDataSq.fromJson,
    (SongQualityDetailDataJm).toString(): SongQualityDetailDataJm.fromJson,
    (SongQualityDetailDataJe).toString(): SongQualityDetailDataJe.fromJson,
    (SongQualityDetailDataVi).toString(): SongQualityDetailDataVi.fromJson,
    (SongUrlEntity).toString(): SongUrlEntity.fromJson,
    (SongUrlData).toString(): SongUrlData.fromJson,
    (SongUrlDataFreeTrialPrivilege).toString(): SongUrlDataFreeTrialPrivilege.fromJson,
    (SongUrlDataFreeTimeTrialPrivilege).toString(): SongUrlDataFreeTimeTrialPrivilege.fromJson,
    (TopArtistEntity).toString(): TopArtistEntity.fromJson,
    (TopArtistArtists).toString(): TopArtistArtists.fromJson,
    (BoolEntity).toString(): BoolEntity.fromJson,
    (LikeListEntity).toString(): LikeListEntity.fromJson,
    (LoginEntity).toString(): LoginEntity.fromJson,
    (LoginAccount).toString(): LoginAccount.fromJson,
    (LoginProfile).toString(): LoginProfile.fromJson,
    (LoginProfileExperts).toString(): LoginProfileExperts.fromJson,
    (LoginBindings).toString(): LoginBindings.fromJson,
    (QrCheckEntity).toString(): QrCheckEntity.fromJson,
    (QrcodeKeyEntity).toString(): QrcodeKeyEntity.fromJson,
    (StringEntity).toString(): StringEntity.fromJson,
    (UserInfoEntity).toString(): UserInfoEntity.fromJson,
    (UserInfoAccount).toString(): UserInfoAccount.fromJson,
    (UserInfoProfile).toString(): UserInfoProfile.fromJson,
    (UserPlaylistEntity).toString(): UserPlaylistEntity.fromJson,
    (UserPlaylistPlaylist).toString(): UserPlaylistPlaylist.fromJson,
    (UserPlaylistPlaylistCreator).toString(): UserPlaylistPlaylistCreator.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}